# This file is responsible for seting up several compiler enviorments.
# Once setup is done, the template "build.yml" is invoked to test freetype
# compiles successfully on various operating systems and compilers liststed
# below. Artifacts of all builds are also published to azure.

# TODO: Add functionality tests

trigger:
- master

variables:
  vcpkgGitRef: a41c53c14794bb32cb03269069cdd3b66fedda5f # Update this git ref to update vcpkg
  vckpgPackages: zlib bzip2 libpng harfbuzz
  
jobs:

## Linux ##

- job: ArchLinux
  pool:
    vmImage: ubuntu-latest
  strategy:
    matrix:
      shared:
        BUILD_SHARED_LIBS: true
      static:
        BUILD_SHARED_LIBS: false
  
  steps:
    - checkout: self
      path: freetype2
      
    - bash: |
        set -e
        cd $(Build.BinariesDirectory)
        ARCH_URL=`curl -s https://mirrors.acm.wpi.edu/archlinux/iso/latest/ | egrep -o 'archlinux-bootstrap-([0-9._]+)-x86_64.tar.gz' | head -n1`
        echo https://mirrors.acm.wpi.edu/archlinux/iso/latest/$ARCH_URL
        curl https://mirrors.acm.wpi.edu/archlinux/iso/latest/$ARCH_URL -o arch.tar.gz
        sudo tar xzf arch.tar.gz
        sudo mount --bind ./root.x86_64/ ./root.x86_64/
        sudo cp -R $(Agent.BuildDirectory)/freetype2 ./root.x86_64/
        sudo mkdir -p ./root.x86_64/$(Build.BinariesDirectory)
        sudo mount --bind $(Build.BinariesDirectory) ./root.x86_64/$(Build.BinariesDirectory) 
        cat << EOF | sudo ./root.x86_64/bin/arch-chroot ./root.x86_64/
        set -e
        echo 'Server = https://mirrors.kernel.org/archlinux/\$repo/os/\$arch' >> /etc/pacman.d/mirrorlist
        pacman-key --init 
        pacman-key --populate archlinux
        pacman -Syu --noconfirm base base-devel git gcc cmake harfbuzz zlib libpng 
        EOF
      displayName: 'Bootstrap Archlinux'
      
    - template: build.yml
      parameters:
        preCMD: 'cd $(Build.BinariesDirectory) && cat << EOF | sudo ./root.x86_64/bin/arch-chroot ./root.x86_64/'
        srcDIR: freetype2
        postCMD: 'EOF'
        cmakeArgs: '-G "Unix Makefiles" -D BUILD_SHARED_LIBS=$(BUILD_SHARED_LIBS)'

## Windows ##

- job: MSVC_2019
  displayName: "MVSC 2019"
  pool:
    vmImage: windows-latest
  strategy:
    matrix:
      i686_shared:
        TRIPLET: x86-windows
        BUILD_SHARED_LIBS: true
        ARCH: Win32
      x86_64_shared:
        TRIPLET: x64-windows
        BUILD_SHARED_LIBS: true
        ARCH: x64
      i686_static:
        TRIPLET: x86-windows-static
        BUILD_SHARED_LIBS: false
        ARCH: Win32
      x86_64_static:
        TRIPLET: x64-windows-static
        BUILD_SHARED_LIBS: false
        ARCH: x64

  steps:
    - task: Cache@2
      displayName: 'Cache VCPKG Artifacts'
      inputs:
        key: '"$(TRIPLET)" | "$(vckpgPackages)" | "$(vcpkgGitRef)" | "$(Agent.OS)"'
        path: '$(Build.BinariesDirectory)/vcpkg'
        
    - task: run-vcpkg@0
      displayName: 'Run VCPKG'
      inputs:
        vcpkgArguments: --triplet $(TRIPLET) $(vckpgPackages)
        vcpkgGitCommitId: $(vcpkgGitRef)
        vcpkgGitURL: https://github.com/microsoft/vcpkg.git

    - template: build.yml
      parameters:
        cmakeArgs: '-G "Visual Studio 16 2019" -A $(ARCH) -D CMAKE_TOOLCHAIN_FILE=$(Build.BinariesDirectory)\vcpkg\scripts\buildsystems\vcpkg.cmake -D VCPKG_ROOT=$(Build.BinariesDirectory)\vcpkg -D VCPKG_TARGET_TRIPLET=$(TRIPLET) -D BUILD_SHARED_LIBS=$(BUILD_SHARED_LIBS)'

- job: MINGW
  pool:
    vmImage: windows-latest
  strategy:
    matrix:
      i686_shared:
        MINGW_UPPER: MINGW32
        MINGW_LOWER: mingw32
        MINGW_ARCH: i686
        BUILD_SHARED_LIBS: true
      x86_64_shared:
        MINGW_UPPER: MINGW64
        MINGW_LOWER: mingw64
        MINGW_ARCH: x86_64
        BUILD_SHARED_LIBS: true
      i686_static:
        MINGW_UPPER: MINGW32
        MINGW_LOWER: mingw32
        MINGW_ARCH: i686
        BUILD_SHARED_LIBS: false
      x86_64_static:
        MINGW_UPPER: MINGW64
        MINGW_LOWER: mingw64
        MINGW_ARCH: x86_64
        BUILD_SHARED_LIBS: false
  
  steps:
    - script: |
        git clone https://github.com/msys2/msys2-ci-base.git %CD:~0,2%\msys64
        %CD:~0,2%\msys64\usr\bin\rm -rf %CD:~0,2%\msys64\.git
      displayName: Install MSYS2
    
    - script: |
        set PATH=%CD:~0,2%\msys64\usr\bin;C:\Windows\system32;C:\Windows;C:\Windows\System32\Wbem
        %CD:~0,2%\msys64\usr\bin\pacman --noconfirm -Syyuu
      displayName: Update MSYS2
    
    - script: |
        set PATH=%CD:~0,2%\msys64\usr\bin;C:\Windows\system32;C:\Windows;C:\Windows\System32\Wbem
        %CD:~0,2%\msys64\usr\bin\pacman --noconfirm --needed -S git base-devel mingw-w64-$(MINGW_ARCH)-toolchain mingw-w64-$(MINGW_ARCH)-cmake mingw-w64-$(MINGW_ARCH)-harfbuzz
        %CD:~0,2%\msys64\usr\bin\pacman --noconfirm -Scc
      displayName: Install Toolchain
      
    - template: build.yml
      parameters:
        mingw: true
        cmakeArgs: '-G \"MSYS Makefiles\" -D BUILD_SHARED_LIBS=$(BUILD_SHARED_LIBS)'

## MacOS X ##

- job: MacOS_X
  displayName: "MacOS X"
  pool:
    vmImage: macos-latest

  steps:
    - template: build.yml
      parameters:
        cmakeArgs: '-G Xcode -D BUILD_FRAMEWORK:BOOL=true'

### iOS ##

- job: iOS
  pool:
    vmImage: macos-latest
  strategy:
    matrix:
      OS:
        IOS_PLATFORM: OS
      Simulator:
        IOS_PLATFORM: SIMULATOR64
      TV_OS:
        IOS_PLATFORM: TVOS
      TV_OS_Simulator:
        IOS_PLATFORM: SIMULATOR_TVOS
      Watch_OS:
        IOS_PLATFORM: WATCHOS
      Watch_OS_Simulator:
        IOS_PLATFORM: SIMULATOR_WATCHOS
      
  steps:
    - template: build.yml
      parameters:
        cmakeArgs: '-G Xcode -D PLATFORM=$(IOS_PLATFORM)'
